{"version":3,"sources":["components/Header.js","components/Listitems.js","components/Mainbox.js","App.js","serviceWorker.js","index.js"],"names":["Component","list","props","listItems","this","items","map","item","className","key","type","id","value","data","onChange","event","updateItem","target","aria-hidden","onClick","deleteItem","Fragment","main","state","arr","currentItem","handleAddSubmit","bind","handleInputChange","setState","Date","preventDefault","newItem","console","log","newarr","remaining","filter","x","onSubmit","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4VAEqBA,Y,aCwBNC,G,8DAtBX,WAAYC,GAAO,uCACTA,G,qDAED,IAAD,OACEC,EAAYC,KAAKF,MAAMG,MAAMC,KAAI,SAAAC,GAEjC,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BAAOD,UAAU,MAAME,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAAD,OAAS,EAAKb,MAAMc,WAAWD,EAAME,OAAOL,MAAML,EAAKE,QACnI,8BAAM,uBAAGD,UAAU,kBAAkBU,cAAY,OAAOC,QAAS,kBAAI,EAAKjB,MAAMkB,WAAWb,EAAKE,cAKnH,OACI,kBAAC,IAAMY,SAAP,KACKlB,O,GAlBEH,cC0EJsB,E,kDAzEX,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAM,CACPC,IAAI,GACJC,YAAY,CACRZ,KAAK,GACLJ,IAAI,KAGZ,EAAKiB,gBAAgB,EAAKA,gBAAgBC,KAArB,gBACrB,EAAKC,kBAAkB,EAAKA,kBAAkBD,KAAvB,gBACvB,EAAKP,WAAW,EAAKA,WAAWO,KAAhB,gBAChB,EAAKX,WAAW,EAAKA,WAAWW,KAAhB,gBAZF,E,8DAcAZ,GAEdX,KAAKyB,SAAS,CACVJ,YAAY,CACRZ,KAAKE,EAAME,OAAOL,MAClBH,IAAI,IAAIqB,U,sCAIJf,GACZA,EAAMgB,iBACN,IAAMC,EAAU5B,KAAKmB,MAAME,YAE3B,GADAQ,QAAQC,IAAIF,GACM,KAAfA,EAAQnB,KACX,CACI,IAAMsB,EAAO,GAAD,mBAAK/B,KAAKmB,MAAMC,KAAhB,CAAoBQ,IACpC5B,KAAKyB,SAAS,CACVL,IAAKW,EACLV,YAAY,CACRZ,KAAK,GACLJ,IAAI,S,iCAKLA,GACP,IAAM2B,EAAUhC,KAAKmB,MAAMC,IAAIa,QAAQ,SAAAC,GAAC,OACpCA,EAAE7B,MAAMA,KACZL,KAAKyB,SAAS,CACVL,IAAIY,M,iCAIDvB,EAAKJ,GACZ,IAAMe,EAAMpB,KAAKmB,MAAMC,IACvBA,EAAIlB,KAAI,SAAAC,GACDA,EAAKE,MAAMA,IACVF,EAAKM,KAAKA,MAGlBT,KAAKyB,SAAS,CACVL,IAAIA,M,+BAIR,OACI,yBAAKb,GAAG,OACJ,0BAAM4B,SAAUnC,KAAKsB,gBAAiBf,GAAG,QACrC,2BAAOD,KAAK,OAAOE,MAAOR,KAAKmB,MAAME,YAAYZ,KAAMC,SAAUV,KAAKwB,oBACtE,4BAAQlB,KAAK,SAASF,UAAU,OAAhC,QAEJ,6BACI,kBAAC,EAAD,CAAMH,MAAOD,KAAKmB,MAAMC,IAAKJ,WAAYhB,KAAKgB,WAAYJ,WAAYZ,KAAKY,mB,GAnE5EhB,aCWJwC,MATf,WACE,OACE,6BAEE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.f11e3adf.chunk.js","sourcesContent":["import './header.css';\r\nimport React, { Component } from 'react';\r\nclass Header extends Component{\r\nrender(){\r\n    return(\r\n        <div id=\"head\">\r\n            <h1>To Do List</h1>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './listitems.css'\r\n\r\nclass list extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        const listItems = this.props.items.map(item => \r\n            {\r\n              return (\r\n                  <div className=\"list\" key={item.key}>\r\n                      <p>\r\n                          <input className=\"ert\" type=\"text\" id={item.key} value={item.data} onChange={(event)=>this.props.updateItem(event.target.value,item.key)} />\r\n                           <span><i className=\"fa fa-trash del\" aria-hidden=\"true\" onClick={()=>this.props.deleteItem(item.key)}></i></span>\r\n                      </p>\r\n                  </div>\r\n              )  \r\n            })\r\n        return(\r\n            <React.Fragment>\r\n                {listItems}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default list;","import React,{ Component } from 'react';\r\nimport './box.css';\r\nimport List from './Listitems';\r\nclass main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            arr:[],\r\n            currentItem:{\r\n                data:'',\r\n                key:''\r\n            }\r\n        }\r\n        this.handleAddSubmit=this.handleAddSubmit.bind(this);\r\n        this.handleInputChange=this.handleInputChange.bind(this);\r\n        this.deleteItem=this.deleteItem.bind(this);\r\n        this.updateItem=this.updateItem.bind(this);\r\n    }\r\n    handleInputChange(event)\r\n    {\r\n        this.setState({\r\n            currentItem:{\r\n                data:event.target.value,\r\n                key:new Date()\r\n            }\r\n        })\r\n    }\r\n    handleAddSubmit(event){\r\n        event.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        console.log(newItem);\r\n        if(newItem.data!==\"\")\r\n        {\r\n            const newarr=[...this.state.arr,newItem]\r\n        this.setState({\r\n            arr: newarr,\r\n            currentItem:{\r\n                data:'',\r\n                key:''\r\n            }\r\n        })\r\n    }\r\n    }\r\n    deleteItem(key){\r\n        const remaining=this.state.arr.filter( x =>\r\n            x.key!==key);\r\n        this.setState({\r\n            arr:remaining\r\n        })\r\n    }\r\n\r\n    updateItem(data,key){\r\n        const arr = this.state.arr;\r\n        arr.map(item => {\r\n            if(item.key===key){\r\n                item.data=data;\r\n            }\r\n        })\r\n        this.setState({\r\n            arr:arr\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div id=\"box\">\r\n                <form onSubmit={this.handleAddSubmit} id=\"form\">\r\n                    <input type=\"text\" value={this.state.currentItem.data} onChange={this.handleInputChange}/>\r\n                    <button type=\"submit\" className=\"btn\">Add</button>\r\n                </form>\r\n                <div>\r\n                    <List items={this.state.arr} deleteItem={this.deleteItem} updateItem={this.updateItem} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default main ;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Main from './components/Mainbox';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      {/* <Header />? */}\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './font-awesome/css/font-awesome.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}